@model PagesModel

<ul class="pagination">

    @* TO Show or Hide Button for Previous Page *@
    <li class="@(Model.CurrentPage == 1 ?  Hide : string.Empty)">
        <a asp-area="" asp-controller="Issue" asp-action="Index" asp-route-pagination="@Model.PreviousPage"
           aria-label="Previous">
            <span aria-hidden="true">&laquo;</span> @*&nbsp; prev*@
        </a>
    </li>

    @* Show buttons before currentPage *@
    @for (int i = ButtonsBeforeAndAfterCurrent; i >= 1; i--)
    {
        if (Model.CurrentPage - i > 0)
        {
            <li class="inactive">
                <a asp-area="" asp-controller="Issue" asp-action="Index" asp-route-pagination="@(Model.CurrentPage - i)">
                    @(Model.CurrentPage - i)<span class="sr-only"></span>
                </a>
            </li>
        }
    }

    @* Show Current page button *@
    <li class="active">
        <a asp-area="" asp-controller="Issue" asp-action="Index" asp-route-pagination="@Model.CurrentPage">
            @Model.CurrentPage
            <span class="sr-only">(current)</span>
        </a>
    </li>

    @* Show buttons after currentPage *@
    @for (int i = 1; i < ButtonsBeforeAndAfterCurrent; i++)
    {
        if (Model.CurrentPage + i <= Model.TotalPages)
        {
            <li class="inactive">
                <a asp-area="" asp-controller="Issue" asp-action="Index" asp-route-pagination="@(Model.CurrentPage + i)">
                    @(Model.CurrentPage + i)
                    <span class="sr-only"></span>
                </a>
            </li>
        }
    }

    @*TO Show or not button for next page*@
    <li class="@(Model.CurrentPage == Model.TotalPages ? Hide : string.Empty)">
        <a asp-area="" asp-controller="Issue" asp-action="Index" asp-route-pagination="@(Model.NextPage)" aria-label="Next">
            <span aria-hidden="true"> &raquo;</span> @*next&nbsp;*@
        </a>
    </li>

</ul>

