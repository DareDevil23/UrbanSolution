@model UrbanIssueDetailsServiceModel

@inject IConfiguration Configuration
@{
    ViewData["Title"] = $@"Details for issue ""{Model.Title}""";
    var apiKey = Configuration.GetSection("Google:MapsApiKey").Value;    //TODO: remove after partial/component
}

<div row class="text-info">
    <h3 class="text-center">@this.ViewData["Title"]</h3>
    <br />
</div>

<div class="row">
    <div class="form-group col-md-5">
        <div class="row">
            <h4>
                Published by <em class="text-info">@Model.Publisher</em> on
                <em class="text-info">@Model.PublishedOn.ToShortDateString()</em>
            </h4>
            <h4>Address: <em class="text-info">@Model.AddressStreet</em></h4>
            <div>
                <h4>
                    Type: <em class="text-info">@Model.Type.ToFriendlyName()</em>,
                    Region: <em class="text-info">@Model.Region</em>
                </h4>
            </div>
            
            @* Buttons for approve/delete/edit... *@
            @await Component.InvokeAsync("IssueDetailsButtons")

            <h3><em>@Model.Description</em></h3>
        </div>
    </div>
    <div class="form-group col-md-5 col-md-offset-1">
        <div class="row">
            <div id="map" style="height: 400px; width: 600px;">
                @*TODO/ make template for map*@
            </div>
        </div>                      
        
    </div>
</div>


@section Scripts {

    <script>
        function initMap() {
            var myLatLng = { lat: @(Model.Latitude), lng: @(Model.Longitude) };
            var mapOptions = { zoom: @(WebConstants.ZoomMapIssueDetails), center: myLatLng }
            var map = new google.maps.Map(document.getElementById('map'), mapOptions);
            var marker = new google.maps.Marker({ position: myLatLng, map: map });
        }
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=@(apiKey)&callback=initMap" async defer></script>
}